---
- name: Provision and Configure LXC Container on Proxmox
  hosts: proxmox
  gather_facts: false
  vars_files:
    - ../secrets.yml  # Include your encrypted vault file here
  tasks:
    - name: Check if LXC container exists
      shell: "pct status {{ proxmox_vmid }}"
      register: lxc_status
      ignore_errors: yes

    - name: Stop LXC container if it's running
      shell: "pct stop {{ proxmox_vmid }}"
      when: lxc_status.rc == 0
      ignore_errors: yes

    - name: Remove existing LXC container
      shell: "pct destroy {{ proxmox_vmid }} --force"
      when: lxc_status.rc == 0

    # Create LXC Container on Proxmox
    - name: Create LXC container
      delegate_to: localhost
      community.general.proxmox:
        api_host: "192.168.0.2" # Use IP or hostname for Proxmox server
        api_user: "root@pam"
        api_token_id: "ansiblelxc"
        api_token_secret: "{{ proxmox_secret }}"
        node: "proxmox"
        vmid: "{{ proxmox_vmid }}"
        hostname: "{{ app_name }}"
        ostemplate: "local:vztmpl/debian-12-standard_12.7-1_amd64.tar.zst"
        storage: "local-lvm"
        memory: 512
        cores: 1
        netif: '{"net0":"name=eth0,bridge=vmbr0,ip=dhcp"}'
        state: present
        pubkey: "{{ lookup('file', '~/.ssh/proxmox.pub') }}"

    # Start the new LXC (container)
    - name: Start LXC
      delegate_to: localhost
      community.general.proxmox:
        api_host: "192.168.0.2"
        api_user: "root@pam"
        api_token_id: "ansiblelxc"
        api_token_secret: "{{ proxmox_secret }}"
        node: "proxmox"
        vmid: "{{ proxmox_vmid }}"
        state: started

    # Prepare LXC via Proxmox Host (Install SSH)
    - name: Install SSH server directly on LXC container
      shell: |
        pct exec {{ proxmox_vmid }} -- apt-get update
        pct exec {{ proxmox_vmid }} -- apt-get install -y openssh-server
        pct exec {{ proxmox_vmid }} -- systemctl enable ssh
        pct exec {{ proxmox_vmid }} -- systemctl start ssh

    # Fetch LXC IP Address
    - name: Get LXC container's IP address
      shell: |
        pct exec {{ proxmox_vmid }} -- hostname -I | awk '{print $1}'
      register: lxc_ip_output

    # Set LXC IP address as variable
    - name: Set LXC container IP
      set_fact:
        lxc_ip: "{{ lxc_ip_output.stdout.strip() }}"
        cacheable: yes
 
    # Add LXC to inventory to reference later
    - name: Add LXC container to inventory
      add_host:
        name: lxc_container
        ansible_host: "{{ lxc_ip }}"
        ansible_user: root
        ansible_ssh_private_key_file: ~/.ssh/proxmox
        ansible_become: yes

- name: Configure LXC Container
  hosts: lxc_container
  gather_facts: no
  vars:
    lxc_ip: "{{ hostvars['proxmox']['lxc_ip'] }}"
  vars_files:
    - ../secrets.yml  # Include your encrypted vault file here
  tasks:
    # Add the newly created LXC host key to known_hosts to mitigate console prompt
    - name: Add LXC host key to known_hosts
      shell: ssh-keyscan -H {{ lxc_ip }} >> ~/.ssh/known_hosts
      delegate_to: localhost

    # Get the key from secrets.yml and create the file on LXC
    - name: Write SSH private key to LXC
      copy:
        content: "{{ github_key }}"
        dest: "/etc/ssh/github_id_rsa"
        mode: '0600'
      become: yes

    # Install Git
    - name: Install git
      apt:
        name: git
        state: present
        update_cache: yes
      become: yes

    # Clone GitHub Repository
    - name: Clone GitHub repository
      git:
        repo: "{{ github_repo_url }}" # Set repo to application for hosting
        dest: "/var/www/node-app"
        version: "main"
        force: yes
        key_file: "/etc/ssh/github_id_rsa"
        accept_hostkey: yes
        ssh_opts: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
      become: yes

    # Install Node.js, NPM
    - name: Install Node.js
      shell: |
        curl -sL https://deb.nodesource.com/setup_14.x | bash -
        apt-get install -y nodejs npm
      become: yes

    # Install PM2 for persistence
    - name: Install PM2
      npm:
        name: pm2
        global: yes
      become: yes

    # Start the Node.js Application
    - name: Start the Node.js application using PM2
      shell: |
        cd /var/www/node-app
        npm install
        pm2 start npm --name "node-app" -- start
        pm2 save
      become: yes

    # Output Container's IP Address
    - name: Display the LXC container's IP address
      debug:
        msg: "The app is running and accessible at http://{{ lxc_ip }}:3000"

    - name: Download cloudflared .deb
      ansible.builtin.get_url:
        url: https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
        dest: /tmp/cloudflared.deb

    - name: Install cloudflared .deb package
      ansible.builtin.apt:
        deb: /tmp/cloudflared.deb

    - name: Lookup tunnels
      uri:
        url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/cfd_tunnel"
        method: GET
        headers:
          X-Auth-Key: "{{ cloudflare_api_key }}"
          X-Auth-Email: "{{ cloudflare_email }}"
          Content-Type: "application/json"
        return_content: true
      register: existing_tunnels

    - name: Delete existing tunnel if found
      uri:
        url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/cfd_tunnel/{{ item.id }}"
        method: DELETE
        headers:
          X-Auth-Key: "{{ cloudflare_api_key }}"
          X-Auth-Email: "{{ cloudflare_email }}"
      when: item.name == "{{ app_name }}"
      with_items: "{{ existing_tunnels.json.result }}"

    - name: Create new Cloudflare tunnel
      uri:
        url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/cfd_tunnel"
        method: POST
        headers:
          X-Auth-Key: "{{ cloudflare_api_key }}"
          X-Auth-Email: "{{ cloudflare_email }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "{{ app_name }}"
      register: tunnel_create_response

    - name: Run cloudflared service install with token
      command: cloudflared service install {{ tunnel_create_response.json.result.token }}
      environment:
        HOME: /root
      args:
        creates: /etc/systemd/system/cloudflared.service

    - name: Set tunnel public hostname
      uri:
        url: "https://api.cloudflare.com/client/v4/accounts/{{ cloudflare_account_id }}/cfd_tunnel/{{ tunnel_create_response.json.result.id }}/configurations"
        method: PUT
        headers:
          X-Auth-Key: "{{ cloudflare_api_key }}"
          X-Auth-Email: "{{ cloudflare_email }}"
          Content-Type: "application/json"
        body_format: json
        body:
          config:
            ingress:
              - hostname: "{{ app_name }}.{{ cloudflare_domain }}"
                service: "http://localhost:3000"
              - service: http_status:404
      delegate_to: localhost

    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Ensure cloudflared service is enabled and running
      ansible.builtin.systemd:
        name: cloudflared
        enabled: yes
        state: started

    - name: Ensure DNS record exists and is updated if needed
      community.general.cloudflare_dns:
        zone: "{{ cloudflare_domain }}"
        record: "{{ app_name }}.{{ cloudflare_domain }}"
        type: CNAME
        value: "{{ tunnel_create_response.json.result.id }}.cfargotunnel.com"
        account_email: "{{ cloudflare_email }}"
        account_api_key: "{{ cloudflare_api_key }}"
        proxied: true
        state: present

    - name: Restart cloudflared to apply config
      ansible.builtin.systemd_service:
        name: cloudflared
        state: restarted
        daemon_reload: true
        enabled: true

